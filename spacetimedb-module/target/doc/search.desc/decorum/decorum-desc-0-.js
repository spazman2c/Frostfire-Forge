searchState.loadedDescShard("decorum", 0, "Making floating-point behave: ordering, equivalence, …\nFloating-point proxy that provides a total ordering, …\nFloating-point encoding.\nFloating-point representation that must be a real number.\nFloating-point representations.\nFloating-point representations that expose infinities.\n32-bit floating-point representation that cannot be <code>NaN</code>.\n64-bit floating-point representation that cannot be <code>NaN</code>.\nA representation of <code>NaN</code>.\nFloating-point representations that expose <code>NaN</code>s.\nFloating-point representation that cannot be <code>NaN</code>.\nPrimitive floating-point types.\n32-bit floating-point representation that must be a real …\n64-bit floating-point representation that must be a real …\nTypes that can represent real numbers.\nConverts floating-point values into a canonicalized form.\nFloating-point representation with total ordering.\nOrdering and comparisons.\nReturns the argument unchanged.\nConverts a primitive floating-point value into a proxy.\nConverts a proxy into another proxy that is capable of …\nHashing.\nCalls <code>U::from(self)</code>.\nConverts a proxy into a primitive floating-point value.\nConverts a proxy into another proxy that is capable of …\nConversion to a canonical representation.\nEquivalence relation for floating-point primitives.\nTotal ordering of primitive floating-point types.\nPartial ordering of types with intrinsic representations …\nReturns <code>true</code> if a value encodes <em>undefined</em>, otherwise <code>false</code>.\nPartial maximum of types with intrinsic representations …\nCompares two values and returns their pairwise minimum and …\nPartial minimum of types with intrinsic representations …\nHashing for primitive floating-point values.")