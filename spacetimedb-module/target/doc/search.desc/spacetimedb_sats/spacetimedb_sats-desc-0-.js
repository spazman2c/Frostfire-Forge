searchState.loadedDescShard("spacetimedb_sats", 0, "A reference to an <code>AlgebraicType</code> within a <code>Typespace</code>.\nThe type of this value.\nThe <code>Value</code> trait provides an abstract notion of a value.\nA borrowed value combined with its type and typing context …\nAdds a <code>Typespace</code> context atop of a borrowed type.\nMinimal utility for reading &amp; writing the types we need to …\nWraps <code>ty</code> in an empty context.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHashes every elem in the BSATN-encoded array value.\nAllocation-free hex formatting.\nA 256-bit signed integer type.\nReturns the index into the specific <code>Typespace</code>’s list of …\nImplements <code>Deserialize</code> for a type in a simplified manner.\nImplements <code>Serialize</code> for a type in a simplified manner.\nImplements <code>SpacetimeType</code> for a type in a simplified manner.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefines <code>Layout</code>, which encompasses the fixed size and …\nMaps the object we’ve wrapped from <code>&amp;T -&gt; &amp;U</code> in our …\nProvides the <code>MetaType</code> trait.\nWraps the borrowed value <code>val</code> with its type combined with …\nWraps <code>ty</code> in a context combined with the <code>typespace</code>.\nConstructs a product value from a list of fields with …\nReturns the <code>AlgebraicType</code> that <code>r</code> resolves to in the …\nReturns the type of the value.\nReturns the object that the context was created with.\nReturns the typing context (<code>Typespace</code>).\nReturns the typespace context.\nA 256-bit unsigned integer type.\nReturns the borrowed value.\nReuses the typespace we already have and returns <code>val</code> and <code>ty</code>…\nReuses the typespace we already have and returns <code>ty: U</code> …\nWraps <code>val</code> with the type and typespace context in <code>self</code>.\nThe SpacetimeDB Algebraic Type System (SATS) is a …\nThe type of array values where elements are of a base type …\nThe bool type. Values <code>AlgebraicValue::Bool(b)</code> will have …\nThe <code>F32</code> type. Values <code>AlgebraicValue::F32(v)</code> will have this …\nThe <code>F64</code> type. Values <code>AlgebraicValue::F64(v)</code> will have this …\nThe <code>I128</code> type. Values <code>AlgebraicValue::I128(v)</code> will have …\nThe <code>I16</code> type. Values <code>AlgebraicValue::I16(v)</code> will have this …\nThe <code>I256</code> type. Values <code>AlgebraicValue::I256(v)</code> will have …\nThe <code>I32</code> type. Values <code>AlgebraicValue::I32(v)</code> will have this …\nThe <code>I64</code> type. Values <code>AlgebraicValue::I64(v)</code> will have this …\nThe <code>I8</code> type. Values <code>AlgebraicValue::I8(v)</code> will have this …\nA structural product type.\nA type where the definition is given by the typing context …\nThe UTF-8 encoded <code>String</code> type. Values …\nA structural sum type.\nThe <code>U128</code> type. Values <code>AlgebraicValue::U128(v)</code> will have …\nThe <code>U16</code> type. Values <code>AlgebraicValue::U16(v)</code> will have this …\nThe <code>U256</code> type. Values <code>AlgebraicValue::U256(v)</code> will have …\nThe <code>U32</code> type. Values <code>AlgebraicValue::U32(v)</code> will have this …\nThe <code>U64</code> type. Values <code>AlgebraicValue::U64(v)</code> will have this …\nThe <code>U8</code> type. Values <code>AlgebraicValue::U8(v)</code> will have this …\nThe first type in the typespace.\nReturns an unsized array type where the element type is <code>ty</code>.\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nIf this type is the standard option type, returns the type …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nA type representing an array of <code>U8</code>s.\nConstruct a copy of the <code>ConnectionId</code> type.\nWhether this type, or the types it references, contain any …\nReturns the argument unchanged.\nConstruct a copy of the <code>Identity</code> type.\nCalls <code>U::from(self)</code>.\nReturns the inner fields if this is a <code>AlgebraicType::Array</code>…\nReturns the inner fields if this is a …\nReturns the inner fields if this is a <code>AlgebraicType::Ref</code>, …\nReturns the inner fields if this is a <code>AlgebraicType::Sum</code>, …\nReturns true if this is a <code>AlgebraicType::Array</code>, otherwise …\nReturns true if this is a <code>AlgebraicType::Bool</code>, otherwise …\nReturns whether this type is <code>AlgebraicType::bytes()</code>.\nReturns whether this type is the <code>ConnectionId</code> type.\nReturns true if this is a <code>AlgebraicType::F32</code>, otherwise …\nReturns true if this is a <code>AlgebraicType::F64</code>, otherwise …\nReturns whether the type is a float type.\nReturns true if this is a <code>AlgebraicType::I128</code>, otherwise …\nReturns true if this is a <code>AlgebraicType::I16</code>, otherwise …\nReturns true if this is a <code>AlgebraicType::I256</code>, otherwise …\nReturns true if this is a <code>AlgebraicType::I32</code>, otherwise …\nReturns true if this is a <code>AlgebraicType::I64</code>, otherwise …\nReturns true if this is a <code>AlgebraicType::I8</code>, otherwise …\nReturns whether this type is the conventional identity …\nReturns whether this type is one of the integer types, …\nReturns whether this type is a never type.\nReturns true if this is a <code>AlgebraicType::Product</code>, …\nReturns true if this is a <code>AlgebraicType::Ref</code>, otherwise …\nReturns whether this type is one which holds a scalar …\nReturns whether this type is scalar or a string type.\nReturns whether this type is the conventional <code>ScheduleAt</code> …\nReturns whether the type is a signed integer type.\nCheck if the type is one of a small number of special, …\nReturns true if this is a <code>AlgebraicType::String</code>, otherwise …\nReturns true if this is a <code>AlgebraicType::Sum</code>, otherwise …\nReturns whether this type is the conventional time-delta …\nReturns whether this type is the conventional …\nReturns true if this is a <code>AlgebraicType::U128</code>, otherwise …\nReturns true if this is a <code>AlgebraicType::U16</code>, otherwise …\nReturns true if this is a <code>AlgebraicType::U256</code>, otherwise …\nReturns true if this is a <code>AlgebraicType::U32</code>, otherwise …\nReturns true if this is a <code>AlgebraicType::U64</code>, otherwise …\nReturns true if this is a <code>AlgebraicType::U8</code>, otherwise …\nReturns whether this type is a unit type.\nReturns whether the type is an unsigned integer type.\nValidates that the type can be used to generate a type …\nValidates that the type can be used to generate a <em>use</em> of a …\nGiven an AlgebraicType, returns the max value for that …\nThis is a static function that constructs the type of …\nGiven an AlgebraicType, returns the min value for that …\nThe canonical 0-variant “never” / “absurd” / “…\nReturns a structural option type where <code>some_type</code> is the …\nReturns a product type with the given <code>prod</code>.\nReturns a sum type of unit variants with names taken from …\nReturns a sum type with the given <code>sum</code>.\nConstruct a copy of the time-delta <code>TimeDuration</code> type.\nConstruct a copy of the point-in-time <code>Timestamp</code> type.\nThe canonical 0-element unit type.\nWraps the algebraic <code>ty</code> into a <code>Display</code>able.\nWraps the builtin <code>ty</code> into a <code>Display</code>able.\nWraps an algebraic <code>ty</code> in a <code>Display</code> impl using a object/map …\nA value in SATS typed at some <code>AlgebraicType</code>.\nA homogeneous array of <code>AlgebraicValue</code>s. The array has the …\nA <code>bool</code> value of type <code>AlgebraicType::Bool</code>.\nReturns an <code>AlgebraicValue</code> representing <code>v: Box&lt;[u8]&gt;</code>.\nTotally ordered <code>f32</code> allowing all IEEE-754 floating point …\nA totally ordered <code>F32</code> value of type <code>AlgebraicType::F32</code>.\nTotally ordered <code>f64</code> allowing all IEEE-754 floating point …\nA totally ordered <code>F64</code> value of type <code>AlgebraicType::F64</code>.\nAn <code>i128</code> value of type <code>AlgebraicType::I128</code>.\nAn <code>i16</code> value of type <code>AlgebraicType::I16</code>.\nAn <code>i256</code> value of type <code>AlgebraicType::I256</code>.\nAn <code>i32</code> value of type <code>AlgebraicType::I32</code>.\nAn <code>i64</code> value of type <code>AlgebraicType::I64</code>.\nAn <code>i8</code> value of type <code>AlgebraicType::I8</code>.\nThe maximum value in the total ordering. Cannot be …\nThe minimum value in the total ordering. Cannot be …\nReturns an <code>AlgebraicValue</code> for <code>none</code>.\nReturns an <code>AlgebraicValue</code> for <code>some: v</code>.\nWraps <code>T</code> making the outer type packed with alignment 1.\nA structural product value.\nA UTF-8 string value of type <code>AlgebraicType::String</code>.\nA structural sum value.\nA <code>u128</code> value of type <code>AlgebraicType::U128</code>.\nA <code>u16</code> value of type <code>AlgebraicType::U16</code>.\nA <code>u256</code> value of type <code>AlgebraicType::U256</code>.\nA <code>u32</code> value of type <code>AlgebraicType::U32</code>.\nA <code>u64</code> value of type <code>AlgebraicType::U64</code>.\nA <code>u8</code> value of type <code>AlgebraicType::U8</code>.\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nInterpret the value as a byte slice or <code>None</code> if it isn’t …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nDecode a value from <code>bytes</code> typed at <code>ty</code>.\nDecode a vector of values from <code>bytes</code> with each value typed …\nReturns an <code>AlgebraicValue</code> representing a sum value with <code>tag</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nA 256-bit signed integer type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner fields if this is a <code>AlgebraicValue::Array</code>…\nReturns the inner fields if this is a <code>AlgebraicValue::Bool</code>…\nConverts <code>self</code> into a byte string, if applicable.\nReturns the inner fields if this is a <code>AlgebraicValue::F32</code>, …\nReturns the inner fields if this is a <code>AlgebraicValue::F64</code>, …\nReturns the inner fields if this is a <code>AlgebraicValue::I128</code>…\nReturns the inner fields if this is a <code>AlgebraicValue::I16</code>, …\nReturns the inner fields if this is a <code>AlgebraicValue::I256</code>…\nReturns the inner fields if this is a <code>AlgebraicValue::I32</code>, …\nReturns the inner fields if this is a <code>AlgebraicValue::I64</code>, …\nReturns the inner fields if this is a <code>AlgebraicValue::I8</code>, …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a <code>AlgebraicValue::Sum</code>, …\nReturns the inner fields if this is a <code>AlgebraicValue::U128</code>…\nReturns the inner fields if this is a <code>AlgebraicValue::U16</code>, …\nReturns the inner fields if this is a <code>AlgebraicValue::U256</code>…\nReturns the inner fields if this is a <code>AlgebraicValue::U32</code>, …\nReturns the inner fields if this is a <code>AlgebraicValue::U64</code>, …\nReturns the inner fields if this is a <code>AlgebraicValue::U8</code>, …\nReturns true if this is a <code>AlgebraicValue::Array</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::Bool</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::F32</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::F64</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::I128</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::I16</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::I256</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::I32</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::I64</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::I8</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::Max</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::Min</code>, otherwise …\nReturns whether this value represents a numeric zero.\nReturns true if this is a <code>AlgebraicValue::Product</code>, …\nReturns true if this is a <code>AlgebraicValue::String</code>, …\nReturns true if this is a <code>AlgebraicValue::Sum</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::U128</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::U16</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::U256</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::U32</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::U64</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::U8</code>, otherwise …\nReturns an <code>AlgebraicValue</code> representing a product value …\nReturns an <code>AlgebraicValue</code> representing a sum value with <code>tag</code>…\nExtract the value and replace it with a dummy one that is …\nInfer the <code>AlgebraicType</code> of an <code>AlgebraicValue</code>.\nA 256-bit unsigned integer type.\nThe canonical unit value defined as the nullary product …\nAn unstructured error message.\nThe input type does not match the target type.\nErrors that can occur when deserializing the <code>AlgebraicValue</code>…\nAn implementation of <code>Deserializer</code> where the input of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts <code>&amp;AlgebraicValue</code> to <code>&amp;ValueDeserializer</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a <code>ValueDeserializer</code> with <code>val</code> as the input for …\nContinuation for serializing an array.\nContinuation for serializing a map value.\nAn implementation of <code>Serializer</code> where the output of …\nReturns the concatenation of <code>chunks</code> that must be of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a <code>[MaybeUninit&lt;T&gt;]</code> into a <code>[T]</code> by asserting all …\nSerialize <code>x</code> as an <code>AlgebraicValue</code>.\nAn array type is a homogeneous product type of dynamic …\nThe base type every element of the array has.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn iterator on an array of arrays.\nAn array of arrays.\nAn array value in “monomorphized form”.\nA by-value iterator on the elements of an <code>ArrayValue</code> as …\nAn iterator on a <code>bool</code> array.\nAn array of <code>bool</code>s.\nAn iterator on a <code>F32</code> array.\nAn array of totally ordered <code>F32</code>s.\nAn iterator on a <code>F64</code> array.\nAn array of totally ordered <code>F64</code>s.\nAn iterator on an <code>i128</code> array.\nAn array of <code>i128</code>s.\nAn iterator on an <code>i16</code> array.\nAn array of <code>i16</code>s.\nAn iterator on an <code>i256</code> array.\nAn array of <code>i256</code>s.\nAn iterator on an <code>i32</code> array.\nAn array of <code>i32</code>s.\nAn iterator on an <code>i64</code> array.\nAn array of <code>i64</code>s.\nAn iterator on an <code>i8</code> array.\nAn array of <code>i8</code>s.\nAn iterator on a product value array.\nAn array of <code>ProductValue</code>s.\nAn iterator on an array of UTF-8 strings.\nAn array of UTF-8 strings.\nAn iterator on a sum value array.\nAn array of <code>SumValue</code>s.\nAn iterator on a <code>u128</code> array.\nAn array of <code>u128</code>s.\nAn iterator on a <code>u16</code> array.\nAn array of <code>u16</code>s.\nAn iterator on a <code>u256</code> array.\nAn array of <code>u256</code>s.\nAn iterator on a <code>u32</code> array.\nAn array of <code>u32</code>s.\nAn iterator on a <code>u64</code> array.\nAn array of <code>u64</code>s.\nAn iterator on a <code>u8</code> array.\nAn array of <code>u8</code>s.\nThe default <code>ArrayValue</code> is an empty array of sum values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the array is empty.\nReturns a cloning iterator on the elements of <code>self</code> as …\nReturns the length of the array.\nTypes that can be encoded to BSATN.\nEnforces that a type is a primitive. This is purely …\nDecode <code>bytes</code> to the value type of <code>ty: S</code>.\nDefines the function <code>eq_bsatn</code> which equates …\nDeserialize a <code>T</code> from the BSATN format in the buffered …\nDeserialize a <code>T</code> from the BSATN format in <code>bytes</code>.\nReturns the static size of the type of this object.\nBSATN-encode the row referred to by <code>self</code> into <code>buf</code>, pushing …\nBSATN-encode the row referred to by <code>self</code> into a …\nComputes the size of <code>val</code> when BSATN encoding without …\nSerialize <code>value</code> into a <code>Vec&lt;u8&gt;</code> in the BSATN format.\nSerialize <code>value</code> into the buffered writer <code>w</code> in the BSATN …\nDeserializer for array elements.\nDeserializer from the BSATN data format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a deserializer using the given <code>reader</code>.\nEquates <code>lhs</code> to a BSATN-encoded <code>AlgebraicValue</code> of the same …\nAn error during BSATN serialization.\nDefines the BSATN serialization data format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a serializer using the given <code>writer</code>.\nA buffered reader of some kind.\nA buffered writer of some kind.\nNot enough data was provided in the input.\nA <code>BufWriter</code> that only counts the bytes.\nA cursor based [<code>BufReader&lt;&#39;de&gt;</code>] implementation.\nAn error that occurred when decoding.\nExpected the byte to be 0 or 1 to be a valid bool.\nLength did not match the statically expected length.\nThe tag does not exist for the sum.\nExpected data to be UTF-8 but it wasn’t.\nCustom error not in the other variants of <code>DecodeError</code>.\nA <code>BufWriter</code> that writes the bytes to two writers <code>W1</code> and <code>W2</code>.\nThe underlying input read from.\nConsumes the counter and returns the final count.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReads an array of type <code>[u8; N]</code> from the input.\nReads and returns a chunk of <code>.len() = N</code> as an array, …\nReads and returns a chunk of <code>.len() = size</code> advancing the …\nReads an <code>i128</code> in little endian (LE) encoding from the …\nReads an <code>i16</code> in little endian (LE) encoding from the input.\nReads an <code>i256</code> in little endian (LE) encoding from the …\nReads an <code>i32</code> in little endian (LE) encoding from the input.\nReads an <code>i64</code> in little endian (LE) encoding from the input.\nReads an <code>i8</code> in little endian (LE) encoding from the input.\nReads and returns a byte slice of <code>.len() = size</code> advancing …\nReads a <code>u128</code> in little endian (LE) encoding from the input.\nReads a <code>u16</code> in little endian (LE) encoding from the input.\nReads a <code>u256</code> in little endian (LE) encoding from the input.\nReads a <code>u32</code> in little endian (LE) encoding from the input.\nReads a <code>u64</code> in little endian (LE) encoding from the input.\nReads a <code>u8</code> in little endian (LE) encoding from the input.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new cursor on the provided <code>buf</code> input.\nThe position within the reader.\nWrites an <code>i128</code> to the buffer in little-endian (LE) …\nWrites an <code>i16</code> to the buffer in little-endian (LE) encoding.\nWrites an <code>i256</code> to the buffer in little-endian (LE) …\nWrites an <code>i32</code> to the buffer in little-endian (LE) encoding.\nWrites an <code>i64</code> to the buffer in little-endian (LE) encoding.\nWrites an <code>i8</code> to the buffer in little-endian (LE) encoding.\nWrites the <code>slice</code> to the buffer.\nWrites a <code>u128</code> to the buffer in little-endian (LE) encoding.\nWrites a <code>u16</code> to the buffer in little-endian (LE) encoding.\nWrites a <code>u256</code> to the buffer in little-endian (LE) encoding.\nWrites a <code>u32</code> to the buffer in little-endian (LE) encoding.\nWrites a <code>u64</code> to the buffer in little-endian (LE) encoding.\nWrites a <code>u8</code> to the buffer in little-endian (LE) encoding.\nReturns the number of bytes left to read in the input.\nProvides an <code>ArrayVisitor</code> with access to each element of …\nA visitor walking through a <code>Deserializer</code> for arrays.\nAn implementation of [<code>ArrayVisitor&lt;&#39;de, T&gt;</code>] where the …\nAn implementation of [<code>ArrayVisitor&lt;&#39;de, T&gt;</code>] where the …\nA data structure that can be deserialized from any data …\nA data structure that can be deserialized in SATS without …\n<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …\nA data format that can deserialize any data structure …\nThe element / base type of the array.\nThe <code>Error</code> trait allows <code>Deserialize</code> implementations to …\nThe error type that can be returned if some error occurs …\nThe error type that can be returned if some error occurs …\nThe error type that can be returned if some error occurs …\nThe error type that can be returned if some error occurs …\nThe error type that can be returned if some error occurs …\nTurns a closure <code>impl Fn(&amp;mut Formatter) -&gt; Result</code> into a …\nVisitor used to deserialize the name of a field.\nA vector with two operations: <code>with_capacity</code> and <code>push</code>.\nProvides a <code>ProductVisitor</code> with access to each element of …\nDeserializes <code>none</code> variant of an optional value.\nThe resulting product.\nThe resulting field name.\nThe resulting sum.\nThe result of identifying a variant, e.g., some index type.\nThe output produced by this visitor.\nThe output produced by this visitor.\nThe type produced by using this seed.\nWhat kind of product is this?\nA visitor walking through a <code>Deserializer</code> for products.\nA product in the context of reducer arguments.\nProvides a <code>ProductVisitor</code> with access to each element of …\nA <code>SliceVisitor</code> is provided a slice <code>T</code> of some elements by a …\nProvides a <code>SumVisitor</code> access to the data of a sum in the …\nA visitor walking through a <code>Deserializer</code> for sums.\nThe visitor used to deserialize the content of the sum …\nA visitor passed from <code>SumAccess</code> to <code>SumVisitor::visit_sum</code> …\nA visitor passed from <code>SumVisitor</code> to <code>SumAccess::variant</code> …\nA basic implementation of <code>ArrayVisitor::visit</code> using the …\nRaised when there is general error when deserializing a …\nEquivalent to the more common <code>Deserialize::deserialize</code> …\nDeserialize this value from the given <code>deserializer</code>.\nCalled when deserializing the contents of a sum variant.\nDeserializes an array value.\nDeserializes an array value.\nDeserializes a <code>bool</code> value from the input.\nDeserializes a byte slice-like value.\nDeserializes an <code>f32</code> value from the input.\nDeserializes an <code>f64</code> value from the input.\nDeserializes an <code>i128</code> value from the input.\nDeserializes an <code>i16</code> value from the input.\nDeserializes an <code>i256</code> value from the input.\nDeserializes an <code>i32</code> value from the input.\nDeserializes an <code>i64</code> value from the input.\nDeserializes an <code>i8</code> value from the input.\nDeserializes a product value from the input.\nCalled when deserializing the contents of a sum variant, …\nDeserializes a string-like object the input.\nDeserializes an <code>&amp;str</code> string value.\nDeserializes a sum value from the input.\nDeserializes a <code>u128</code> value from the input.\nDeserializes a <code>u16</code> value from the input.\nDeserializes a <code>u256</code> value from the input.\nDeserializes a <code>u32</code> value from the input.\nDeserializes a <code>u64</code> value from the input.\nDeserializes a <code>u8</code> value from the input.\nA field with <code>index</code> was specified more than once.\nProvides a list of valid field names.\nTurns a closure <code>F: Fn(&amp;mut Formatter) -&gt; Result</code> into a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserializes field name of type <code>V::Output</code> from the input …\nDeserializes field value of type <code>T</code> from the input.\nStatefully deserializes the field value <code>T::Output</code> from the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe product length was not as promised.\nReturns whether an option is expected.\nThe sort of product deserialized.\nThere was a missing field at <code>index</code>.\nReturns a new <code>NoneAccess</code>.\nThis returns <code>Ok(Some(value))</code> for the next element in the …\nDeserializes an <code>T</code> from the input.\nStatefully deserializes <code>T::Output</code> from the input provided …\nReturns the kind of the product.\nReturns the length of the product.\nReturns the name of the product, if any.\nPush to the vector the <code>elem</code>.\nReturns the number of elements remaining in the array, if …\nReturns the name of the sum, if any.\nA field with name <code>field_name</code> does not exist.\nThe <code>name</code> is not that of a variant of the sum type.\nThe <code>tag</code> does not specify a variant of the sum type.\nCalled to identify which variant to deserialize. Returns a …\nProvides a list of variant names.\nDeserializes the name of a field using <code>name</code>.\nThe input contains a slice.\nThe input contains an array.\nThe input contains a slice that lives at least as long (<code>&#39;de</code>…\nIdentify the variant based on <code>name</code>.\nThe input contains a named product.\nThe input contains a slice and ownership of the slice is …\nDeserializes the name of a field using <code>index</code>.\nThe input contains an unnamed product.\nDrives the deserialization of a sum value.\nIdentify the variant based on <code>tag</code>.\nCreate the collection with the given capacity.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMostly a mirror of <code>AlgebraicType</code> annotated with a <code>Layout</code>.\nAn array type. The inner <code>AlgebraicType</code> is stored here.\nA type which knows what its layout is.\nThe layout of a fixed object or the layout that fixed …\nFixed-length row portions must also be sufficiently …\nFixed-length row portions must be at least large enough to …\nA primitive type, annotated with its layout.\nScalar types, i.e. bools, integers and floats. These types …\nA product type, annotated with its layout.\nA mirrior of <code>ProductTypeElement</code> annotated with a <code>Layout</code>.\nA mirror of <code>ProductType</code> annotated with a <code>Layout</code>.\nA mirror of <code>ProductType</code> annotated with a <code>Layout</code>.\nThe type of a row, annotated with a <code>Layout</code>.\nThe size of something in page storage in bytes.\nThe string type corresponds to <code>AlgebraicType::String</code>.\nA sum type, annotated with its layout.\nA mirrior of <code>SumType</code> annotated with a <code>Layout</code>.\nA mirrior of <code>SumTypeVariant</code> annotated with a <code>Layout</code>.\nThe layout of var-len objects. Aligned at a <code>u16</code> which it …\nA variable length type, annotated with its layout.\nTypes requiring a <code>VarLenRef</code> indirection, i.e. strings, …\nConvert an <code>AlgebraicTypeLayout</code> back into an <code>AlgebraicType</code>, …\nConvert a <code>ProductTypeLayout</code> back into an …\nReturns the alignment, in bytes, for objects of this type.\nThe alignment of the object / expected object in bytes.\nAligns a <code>base</code> offset to the <code>required_alignment</code> (in the …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nThe fields of the product type with their own layout …\nThe fields of the product type with their own layout …\nThe fields of the product type with their own layout …\nWhether this is the layout of a fixed object and not the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns whether the variant has the given name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nCan <code>self</code> be changed compatibly to <code>new</code>?\nReturns true if this is a <code>AlgebraicTypeLayout::Primitive</code>, …\nReturns true if this is a <code>AlgebraicTypeLayout::Product</code>, …\nReturns true if this is a <code>AlgebraicTypeLayout::Sum</code>, …\nReturns whether this is a unit variant.\nReturns true if this is a <code>AlgebraicTypeLayout::VarLen</code>, …\nReturns the layout for objects of this type.\nThe memoized layout of the product type.\nThe memoized layout of the product type.\nThe memoized layout of the product type.\nThe layout of a sum value of this sum type.\nReturns the size for use in <code>usize</code> computations.\nAn optional name of the field.\nAn optional name of the variant.\nThe relative offset of a field’s value to its parent …\nThe relative offset of a sum value’s payload for sums of …\nReturns a view of this row type as a product type.\nReturns the minimum row size needed to store <code>required_bytes</code>\nReturns the minimum row size needed to store a <code>T</code>, …\nReturns the size, in bytes, for objects of this type.\nReturns the row size for this row type.\nThe size object / expected object in bytes.\nThe type of the field.\nThe type of the variant.\nThe variants of the sum type.\nReturns a view of this row type as a product type.\nRust types which represent components of the SATS type …\nReturns the type structure of this type as an <code>AlgebraicType</code>…\nGenerate the next [Sequence]\nRepresents constraints for a database table. May apply to …\nUnique + AutoInc\nIndex no unique\nPrimary key column (implies Unique)\nPrimaryKey + AutoInc\nPrimaryKey + Identity\nIndex unique\nGet a flags value with all known bits set.\nCreates a new <code>Constraints</code> instance with …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nReturns the bits representing the constraints.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nCreates a new <code>Constraints</code> instance that is <code>Self::unique</code> if …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nChecks if either ‘IDENTITY’ or ‘PRIMARY_KEY_AUTO’ …\nChecks if either ‘IDENTITY’ or ‘PRIMARY_KEY_AUTO’ …\nChecks if the ‘INDEXED’ constraint is set.\nChecks if the ‘INDEXED’ constraint is set.\nChecks if the ‘PRIMARY_KEY’ constraint is set.\nChecks if the ‘PRIMARY_KEY’ constraint is set.\nChecks if the ‘UNIQUE’ constraint is set.\nChecks if the ‘UNIQUE’ constraint is set.\nCreates a new <code>Constraints</code> instance with …\nCreates a new <code>Constraints</code> instance with …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturns the ColumnAttribute of constraints as an enum …\nReturns the ConstraintKind of constraints as an enum …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nCreates a new <code>Constraints</code> instance with …\nCreates a new <code>Constraints</code> instance with …\nCreates a new <code>Constraints</code> instance with …\nAdds a constraint to the existing constraints.\nAdd auto-increment constraint to the existing constraints. …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nCreates a new <code>Constraints</code> instance with …\nCreates a new <code>Constraints</code> instance with no constraints set.\nThe tag used inside the special <code>ConnectionId</code> product type.\nThe tag used inside the special <code>Identity</code> product type.\nA structural product type  of the factors given by <code>elements</code>…\nThe tag used inside the special <code>Timestamp</code> product type.\nThe tag used inside the special <code>TimeDuration</code> product type.\nThe factors of the product type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns index of the field with the given <code>name</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether this is the special case of …\nReturns whether this is the special tag of <code>ConnectionId</code>.\nReturns whether this is the special case of …\nReturns whether this is the special tag of <code>Identity</code>.\nReturns whether this is a special known type, currently …\nReturns whether this is a special known <code>tag</code>, currently …\nReturns whether this is the special case of …\nReturns whether this is the special tag of …\nReturns whether this is the special case of …\nReturns whether this is the special tag of …\nReturns whether this is a unit type, that is, has no …\nReturns a product type with the given <code>elements</code> as its …\nThis utility function is designed to project fields based …\nReturns the unit product type.\nA factor / element of a product type.\nThe type of the element.\nReturns the argument unchanged.\nReturns whether the field has the given name.\nCalls <code>U::from(self)</code>.\nReturns the name of the field.\nThe name of the field / element.\nReturns an element with the given <code>name</code> and <code>algebraic_type</code>.\nReturns a named element with <code>name</code> and <code>algebraic_type</code>.\nAn error that occurs when a field, of a product value, is …\nA product value is made of a list of “elements” / “…\nThe claimed col_pos of the field within the product value.\nDecode a value from <code>bytes</code> typed at <code>ty</code>.\nDecode a vector of values from <code>bytes</code> with each value typed …\nThe values that make up this product value.\nExtracts the <code>value</code> at field of <code>self</code> identified by <code>index</code> …\nInterprets the value at field of <code>self</code> identified by <code>index</code> …\nInterprets the value at field of <code>self</code> identified by <code>index</code> …\nInterprets the value at field of <code>self</code> identified by <code>index</code> …\nInterprets the value at field of <code>self</code> identified by <code>index</code> …\nInterprets the value at field of <code>self</code> identified by <code>index</code> …\nInterprets the value at field of <code>self</code> identified by <code>index</code> …\nInterprets the value at field of <code>self</code> identified by <code>index</code> …\nInterprets the value at field of <code>self</code> identified by <code>index</code> …\nInterprets the value at field of <code>self</code> identified by <code>index</code> …\nInterprets the value at field of <code>self</code> identified by <code>index</code> …\nInterprets the value at field of <code>self</code> identified by <code>index</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nBorrow the value at field of <code>self</code> identified by <code>col_pos</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe name of the field, if any.\nThis utility function is designed to project fields based …\nPrint as <code>TimeDuration</code> format\nPrint as <code>hex</code> format\nHow format of the <code>SQL</code> output?\nA wrapper that remember the <code>header</code> of the tuple/struct and …\nA wrapper around a <code>T: Satn</code> providing <code>Display</code> and <code>Debug</code> …\nAn extension trait for <code>Serialize</code> providing formatting …\nPrint as <code>Satn</code> format\nPrint as <code>Timestamp</code> format\nA wrapper around a <code>T: Satn</code> providing <code>Display</code> and <code>Debug</code> …\nThe current field\nFormats the value using the SATN data format into the …\nFormats the value using the postgres SATN(PsqlFormatter { …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts <code>&amp;T</code> to <code>&amp;Wrapper&lt;T&gt;</code>.\nConverts <code>&amp;T</code> to <code>&amp;PsqlWrapper&lt;T&gt;</code>.\nThe index of the field in the tuple/struct\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFormats the value using the SATN data format into the …\nPretty prints the value using the SATN data format into …\nThe header of the tuple/struct\nThe base trait serialization error types must implement.\nThe error type when some error occurs during serialization.\nMust match the <code>Error</code> type of any <code>Serializer</code> that uses this …\nMust match the <code>Error</code> type of any <code>Serializer</code> that uses this …\nMust match the <code>Error</code> type of any <code>Serializer</code> that uses this …\nForwards the implementation of a named product value to …\nA type usable in one of the associated types of <code>Serializer</code> …\nThe output type produced by this <code>Serializer</code> during …\nMust match the <code>Ok</code> type of any <code>Serializer</code> that uses this …\nMust match the <code>Ok</code> type of any <code>Serializer</code> that uses this …\nMust match the <code>Ok</code> type of any <code>Serializer</code> that uses this …\nA <strong>data structure</strong> that can be serialized into any data …\nReturned from <code>Serializer::serialize_array</code>.\nType returned from <code>serialize_array</code> for serializing the …\nReturned from <code>Serializer::serialize_named_product</code>.\nType returned from <code>serialize_named_product</code> for serializing …\nReturned from <code>Serializer::serialize_seq_product</code>.\nType returned from <code>serialize_seq_product</code> for serializing …\nA data format that can deserialize any data structure …\nReturns an error derived from <code>msg: impl Display</code>.\nConsumes and finalizes the array serializer returning the …\nConsumes and finalizes the product serializer returning …\nConsumes and finalizes the product serializer returning …\nForwards the serialization of a named product of <code>len</code> fields\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a forwarder based on the provided unnamed product …\nSerialize <code>self</code> in the data format of <code>S</code> using the provided …\nBegin to serialize a variably sized array. This call must …\nSerialize a <code>bool</code> value.\nSerialize the given <code>bsatn</code> encoded data of type <code>ty</code>.\nSerialize the given <code>bsatn</code> encoded data of type <code>ty</code>.\nSerialize a <code>&amp;[u8]</code> byte slice.\nSerialize an array <code>element</code>.\nSerialize an unnamed product <code>element</code>.\nSerialize a named product <code>element</code> with <code>name</code>.\nSerialize an <code>f32</code> value.\nSerialize an <code>f64</code> value.\nSerialize an <code>i128</code> value.\nSerialize an <code>i16</code> value.\nSerialize an <code>i256</code> value.\nSerialize an <code>i32</code> value.\nSerialize an <code>i64</code> value.\nSerialize an <code>i8</code> value.\nBegin to serialize a product with named fields. This call …\nBegin to serialize a product with unnamed fields. This …\nSerialize a <code>&amp;str</code> string slice.\nSerialize the given <code>string</code>.\nSerialize a <code>u128</code> value.\nSerialize a <code>u16</code> value.\nSerialize a <code>u256</code> value.\nSerialize a <code>u32</code> value.\nSerialize a <code>u64</code> value.\nSerialize a <code>u8</code> value.\nSerialize a sum value provided the chosen <code>tag</code>, <code>name</code>, and …\nReturns the unpadded size in bytes of an AlgebraicValue or …\nThe tag used for the <code>none</code> variant of the special <code>option</code> …\nThe tag used for the <code>some</code> variant of the special <code>option</code> …\nThe tag used for the <code>Interval</code> variant of the special …\nThe tag used for the <code>Time</code> variant of the special <code>ScheduleAt</code>…\nA structural sum type.\nCheck whether this sum type is a structural option type.\nCheck whether this sum type is a structural option type.\nReturns the argument unchanged.\nReturns the sum type variant using <code>tag_name</code> with their tag …\nReturns the sum type variant with the given <code>tag</code>.\nReturns the sum type variant using <code>tag_name</code> with their tag …\nCalls <code>U::from(self)</code>.\nReturn whether this sum type is empty, that is, has no …\nCheck whether this sum type is a structural option type.\nReturn whether this sum type is the special <code>ScheduleAt</code> …\nReturns whether this sum type is like on in C without data …\nReturns whether this sum type is a special known type, …\nReturns a sum type with these possible <code>variants</code>.\nReturns a sum type of unnamed variants taken from <code>types</code>.\nThe possible variants of the sum type.\nA variant of a sum type.\nThe type of the variant.\nReturns the argument unchanged.\nReturns whether the variant has the given name.\nCalls <code>U::from(self)</code>.\nReturns whether this is a unit variant.\nReturns the name of the variant.\nThe name of the variant, if any.\nReturns a sum type variant with an optional <code>name</code> and …\nReturns a sum type variant with <code>name</code> and <code>algebraic_type</code>.\nReturns a unit variant with <code>name</code>.\nThe tag of a <code>SumValue</code>. Can be used to read out the tag of …\nA value of a sum type choosing a specific variant of the …\nDecode a value from <code>bytes</code> typed at <code>ty</code>.\nDecode a vector of values from <code>bytes</code> with each value typed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new <code>SumValue</code> with the given <code>tag</code> and <code>value</code>.\nReturns a new <code>SumValue</code> with the given <code>tag</code> and unit value.\nA tag representing the choice of one variant of the sum …\nGiven a variant <code>Var(Ty)</code> in a sum type <code>{ Var(Ty), ... }</code>, …\nA span or delta in time, measured in microseconds.\nReturns a positive <code>TimeDuration</code> with the magnitude of <code>self</code>.\nReturns <code>Some(self + other)</code>, or <code>None</code> if that value would be …\nReturns <code>Some(self - other)</code>, or <code>None</code> if that value would be …\nReturns the argument unchanged.\nReturn a <code>TimeDuration</code> which represents the same span as …\nConstruct a <code>TimeDuration</code> which is <code>micros</code> microseconds.\nCalls <code>U::from(self)</code>.\nReturns <code>Err(abs(self) as Duration)</code> if <code>self</code> is negative.\nReturns a <code>Duration</code> representing the absolute magnitude of …\nGet the number of microseconds <code>self</code> represents.\nA point in time, measured in microseconds since the Unix …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …\nReturns <code>Some(self + duration)</code>, or <code>None</code> if that value would …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …\nReturns <code>Some(self - duration)</code>, or <code>None</code> if that value would …\nReturns the <code>Duration</code> delta between <code>self</code> and <code>earlier</code>, if …\nReturns the argument unchanged.\nReturn a <code>Timestamp</code> which is <code>Timestamp::UNIX_EPOCH</code> plus …\nConstruct a <code>Timestamp</code> which is <code>micros</code> microseconds offset …\nConvert a <code>SystemTime</code> into a <code>Timestamp</code> which refers to …\nCalls <code>U::from(self)</code>.\nParses an RFC 3339 formatted timestamp string\nReturns the <code>TimeDuration</code> delta between <code>self</code> and <code>earlier</code>.\nReturns <code>Err(duration_before_unix_epoch)</code> if <code>self</code> is before …\nGet the number of microseconds <code>self</code> is offset from …\nReturns an RFC 3339 and ISO 8601 date and time string such …\nConvert <code>self</code> into a <code>SystemTime</code> which refers to …\nA trait for Rust types that can be represented as an …\nThis trait makes types self-describing, allowing them to …\nAn error that occurs when attempting to resolve a type.\nA <code>Typespace</code> represents the typing context in SATS.\nA trait for types that can build a <code>Typespace</code>.\nReturns and adds a representation of type <code>T: &#39;static</code> as an …\nInserts an <code>AlgebraicType</code> into the typespace and returns an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>AlgebraicType</code> referred to by <code>r</code> within this …\nReturns a mutable reference to the <code>AlgebraicType</code> referred …\nReturns the <code>AlgebraicType</code> representation of <code>Self</code>.\nInlines all type references in the typespace recursively.\nInlines all type references in <code>ty</code> recursively using the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck that the entire typespace is valid for generating a …\nReturns an <code>AlgebraicType</code> representing the type for <code>Self</code> in …\nReturns a context (<code>Typespace</code>) with the given <code>types</code>.\nIterate over types in the typespace with their references.\nReturns the <code>AlgebraicType</code> that <code>r</code> resolves to in the …\nThe types in our typing context that can be referred to …\nReturns <code>ty</code> combined with the context <code>self</code>.")