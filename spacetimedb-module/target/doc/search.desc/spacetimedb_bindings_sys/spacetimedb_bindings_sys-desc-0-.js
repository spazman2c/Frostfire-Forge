searchState.loadedDescShard("spacetimedb_bindings_sys", 0, "Defines sys calls to interact with SpacetimeDB. This forms …\nCouldn’t decode the BSATN to the expected type\nThe provided buffer is not large enough to store the data\nThe debug log level. See <code>console_log</code>.\nContains the error value\nError values used in the safe bindings API.\nThe error log level. See <code>console_log</code>.\nABI called by host returned an error\nThe index was not unique\nThe info log level. See <code>console_log</code>.\nA log level that can be used in <code>console_log</code>. The variants …\nABI call can only be made while in a transaction\nThe provided sink has no more space left\nThe provided bytes source or sink is not valid\nThe provided console timer does not exist\nNo such index\nThe provided row iterator is not valid\nThe row was not found, e.g., in an update call\nNo such table\nContains the success value\nThe panic log level. See <code>console_log</code>.\nSpecified delay in scheduling row was too long\nThe trace log level. See <code>console_log</code>.\nValue with given unique identifier already exists\nThe warn log level. See <code>console_log</code>.\nConverts this <code>errno</code> into a primitive error code.\nLog at <code>level</code> a <code>text</code> message occurring in …\nDeletes those rows, in the table identified by <code>table_id</code>, …\nDeletes all rows found in the index identified by <code>index_id</code>,\nFinds all rows in the index identified by <code>index_id</code>, …\nInserts a row into the table identified by <code>table_id</code>, where …\nReturns the number of rows currently in table identified …\nStarts iteration on each row, as BSATN-encoded, of a table …\nUpdates a row into the table identified by <code>table_id</code>, where …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts the given <code>code</code> to an error number in <code>Errno</code>’s …\nRead the current module’s identity, as a little-endian …\nQueries the <code>index_id</code> associated with the given (index) <code>name</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the iterator is exhausted or not.\nReturns a description of the errno value, if any.\nProvides a raw set of sys calls which abstractions can be …\nRead some number of BSATN-encoded rows into the provided …\nQueries the <code>table_id</code> associated with the given (table) <code>name</code>…\nIndexing works by putting the index key into a b-tree.\nA handle into a buffer of bytes in the host environment …\nA handle into a buffer of bytes in the host environment …\nIndexing works by hashing the index key.\nAn invalid handle, used e.g., when the reducer arguments …\nAn invalid handle, used e.g., when the iterator has been …\nWhat strategy does the database index use?\nThe debug log level. See <code>console_log</code>.\nThe error log level. See <code>console_log</code>.\nThe info log level. See <code>console_log</code>.\nThe panic log level. See <code>console_log</code>.\nThe trace log level. See <code>console_log</code>.\nThe warn log level. See <code>console_log</code>.\nRepresents table iterators.\nWrites up to <code>buffer_len</code> bytes from …\nReads bytes from <code>source</code>, registered in the host …\nLogs at <code>level</code> a <code>message</code> message occurring in …\nEnd a timing span.\nBegins a timing span with <code>name = name_ptr[..name_len]</code>.\nThis is the same as <code>datastore_index_scan_range_bsatn</code>.\nDeletes those rows, in the table identified by <code>table_id</code>, …\nThis is the same as …\nDeletes all rows found in the index identified by <code>index_id</code>,\nFinds all rows in the index identified by <code>index_id</code>, …\nInserts a row into the table identified by <code>table_id</code>, where …\nWrites the number of rows currently in table identified by …\nStarts iteration on each row, as BSATN-encoded, of a table …\nUpdates a row in the table identified by <code>table_id</code> to <code>row</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWrites the identity of the module into <code>out = out_ptr[..32]</code>.\nQueries the <code>index_id</code> associated with the given (index) <code>name</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads rows from the given iterator registered under <code>iter</code>.\nDestroys the iterator registered under <code>iter</code>.\nQueries the <code>table_id</code> associated with the given (table) <code>name</code>")