searchState.loadedDescShard("spacetimedb_lib", 0, "The SpacetimeDB Algebraic Type System (SATS) is a …\nA value in SATS typed at some <code>AlgebraicType</code>.\nThe type of array values where elements are of a base type …\nA homogeneous array of <code>AlgebraicValue</code>s. The array has the …\nThe bool type. Values <code>AlgebraicValue::Bool(b)</code> will have …\nA <code>bool</code> value of type <code>AlgebraicType::Bool</code>.\nReturns an <code>AlgebraicValue</code> representing <code>v: Box&lt;[u8]&gt;</code>.\nThe <code>F32</code> type. Values <code>AlgebraicValue::F32(v)</code> will have this …\nA totally ordered <code>F32</code> value of type <code>AlgebraicType::F32</code>.\nThe <code>F64</code> type. Values <code>AlgebraicValue::F64(v)</code> will have this …\nA totally ordered <code>F64</code> value of type <code>AlgebraicType::F64</code>.\nTypes which can appear as an argument to an index …\nThe <code>I128</code> type. Values <code>AlgebraicValue::I128(v)</code> will have …\nAn <code>i128</code> value of type <code>AlgebraicType::I128</code>.\nThe <code>I16</code> type. Values <code>AlgebraicValue::I16(v)</code> will have this …\nAn <code>i16</code> value of type <code>AlgebraicType::I16</code>.\nThe <code>I256</code> type. Values <code>AlgebraicValue::I256(v)</code> will have …\nAn <code>i256</code> value of type <code>AlgebraicType::I256</code>.\nThe <code>I32</code> type. Values <code>AlgebraicValue::I32(v)</code> will have this …\nAn <code>i32</code> value of type <code>AlgebraicType::I32</code>.\nThe <code>I64</code> type. Values <code>AlgebraicValue::I64(v)</code> will have this …\nAn <code>i64</code> value of type <code>AlgebraicType::I64</code>.\nThe <code>I8</code> type. Values <code>AlgebraicValue::I8(v)</code> will have this …\nAn <code>i8</code> value of type <code>AlgebraicType::I8</code>.\nThe maximum value in the total ordering. Cannot be …\nThe minimum value in the total ordering. Cannot be …\nA builder for a <code>RawModuleDefV8</code>. Deprecated.\nReturns an <code>AlgebraicValue</code> for <code>none</code>.\nReturns an <code>AlgebraicValue</code> for <code>some: v</code>.\nA structural product type.\nA structural product value.\nA structural product type  of the factors given by <code>elements</code>…\nA factor / element of a product type.\nA product value is made of a list of “elements” / “…\nA versioned raw module definition.\nA type where the definition is given by the typing context …\nThis trait makes types self-describing, allowing them to …\nThe UTF-8 encoded <code>String</code> type. Values …\nA UTF-8 string value of type <code>AlgebraicType::String</code>.\nA structural sum type.\nA structural sum value.\nA structural sum type.\nA span or delta in time, measured in microseconds.\nA point in time, measured in microseconds since the Unix …\nThe <code>U128</code> type. Values <code>AlgebraicValue::U128(v)</code> will have …\nA <code>u128</code> value of type <code>AlgebraicType::U128</code>.\nThe <code>U16</code> type. Values <code>AlgebraicValue::U16(v)</code> will have this …\nA <code>u16</code> value of type <code>AlgebraicType::U16</code>.\nThe <code>U256</code> type. Values <code>AlgebraicValue::U256(v)</code> will have …\nA <code>u256</code> value of type <code>AlgebraicType::U256</code>.\nThe <code>U32</code> type. Values <code>AlgebraicValue::U32(v)</code> will have this …\nA <code>u32</code> value of type <code>AlgebraicType::U32</code>.\nThe <code>U64</code> type. Values <code>AlgebraicValue::U64(v)</code> will have this …\nA <code>u64</code> value of type <code>AlgebraicType::U64</code>.\nThe <code>U8</code> type. Values <code>AlgebraicValue::U8(v)</code> will have this …\nA <code>u8</code> value of type <code>AlgebraicType::U8</code>.\nThe first type in the typespace.\nReturns a positive <code>TimeDuration</code> with the magnitude of <code>self</code>.\nThe type of the element.\nReturns an unsized array type where the element type is <code>ty</code>.\nOptionally returns references to the inner fields if this …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nInterpret the value as a byte slice or <code>None</code> if it isn’t …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nIf this type is the standard option type, returns the type …\nCheck whether this sum type is a structural option type.\nCheck whether this sum type is a structural option type.\nOptionally returns references to the inner fields if this …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nAssert that <code>T</code> is a valid column to use direct index on.\nMinimal utility for reading &amp; writing the types we need to …\nA type representing an array of <code>U8</code>s.\nReturns <code>Some(self + other)</code>, or <code>None</code> if that value would be …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …\nReturns <code>Some(self + duration)</code>, or <code>None</code> if that value would …\nReturns <code>Some(self - other)</code>, or <code>None</code> if that value would be …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …\nReturns <code>Some(self - duration)</code>, or <code>None</code> if that value would …\nConstruct a copy of the <code>ConnectionId</code> type.\nWhether this type, or the types it references, contain any …\ndata should always point to a ProductType in the typespace\nDefines all the typed database objects &amp; schemas.\nDecode a value from <code>bytes</code> typed at <code>ty</code>.\nDecode a value from <code>bytes</code> typed at <code>ty</code>.\nDecode a vector of values from <code>bytes</code> with each value typed …\nDecode a vector of values from <code>bytes</code> with each value typed …\nReturns the <code>Duration</code> delta between <code>self</code> and <code>earlier</code>, if …\nThe factors of the product type.\nThe values that make up this product value.\nReturns an <code>AlgebraicValue</code> representing a sum value with <code>tag</code>…\nExtracts the <code>value</code> at field of <code>self</code> identified by <code>index</code> …\nInterprets the value at field of <code>self</code> identified by <code>index</code> …\nInterprets the value at field of <code>self</code> identified by <code>index</code> …\nInterprets the value at field of <code>self</code> identified by <code>index</code> …\nInterprets the value at field of <code>self</code> identified by <code>index</code> …\nInterprets the value at field of <code>self</code> identified by <code>index</code> …\nInterprets the value at field of <code>self</code> identified by <code>index</code> …\nInterprets the value at field of <code>self</code> identified by <code>index</code> …\nInterprets the value at field of <code>self</code> identified by <code>index</code> …\nInterprets the value at field of <code>self</code> identified by <code>index</code> …\nInterprets the value at field of <code>self</code> identified by <code>index</code> …\nInterprets the value at field of <code>self</code> identified by <code>index</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a <code>TimeDuration</code> which represents the same span as …\nReturn a <code>Timestamp</code> which is <code>Timestamp::UNIX_EPOCH</code> plus …\nConverts a hexadecimal string reference to a byte array.\nConstruct a <code>TimeDuration</code> which is <code>micros</code> microseconds.\nConstruct a <code>Timestamp</code> which is <code>micros</code> microseconds offset …\nConvert a <code>SystemTime</code> into a <code>Timestamp</code> which refers to …\nBorrow the value at field of <code>self</code> identified by <code>col_pos</code>.\nReturns the sum type variant using <code>tag_name</code> with their tag …\nReturns the sum type variant with the given <code>tag</code>.\nReturns the sum type variant using <code>tag_name</code> with their tag …\nReturns whether the field has the given name.\nConstruct a copy of the <code>Identity</code> type.\nReturns index of the field with the given <code>name</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner fields if this is a <code>AlgebraicType::Array</code>…\nReturns the inner fields if this is a <code>AlgebraicValue::Array</code>…\nReturns the inner fields if this is a <code>AlgebraicValue::Bool</code>…\nConverts <code>self</code> into a byte string, if applicable.\nReturns the inner fields if this is a <code>AlgebraicValue::F32</code>, …\nReturns the inner fields if this is a <code>AlgebraicValue::F64</code>, …\nReturns the inner fields if this is a <code>AlgebraicValue::I128</code>…\nReturns the inner fields if this is a <code>AlgebraicValue::I16</code>, …\nReturns the inner fields if this is a <code>AlgebraicValue::I256</code>…\nReturns the inner fields if this is a <code>AlgebraicValue::I32</code>, …\nReturns the inner fields if this is a <code>AlgebraicValue::I64</code>, …\nReturns the inner fields if this is a <code>AlgebraicValue::I8</code>, …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a <code>AlgebraicType::Ref</code>, …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a <code>AlgebraicType::Sum</code>, …\nReturns the inner fields if this is a <code>AlgebraicValue::Sum</code>, …\nReturns the inner fields if this is a <code>AlgebraicValue::U128</code>…\nReturns the inner fields if this is a <code>AlgebraicValue::U16</code>, …\nReturns the inner fields if this is a <code>AlgebraicValue::U256</code>…\nReturns the inner fields if this is a <code>AlgebraicValue::U32</code>, …\nReturns the inner fields if this is a <code>AlgebraicValue::U64</code>, …\nReturns the inner fields if this is a <code>AlgebraicValue::U8</code>, …\nReturns true if this is a <code>AlgebraicType::Array</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::Array</code>, otherwise …\nReturns true if this is a <code>AlgebraicType::Bool</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::Bool</code>, otherwise …\nReturns whether this type is <code>AlgebraicType::bytes()</code>.\nReturns whether this type is the <code>ConnectionId</code> type.\nReturns whether this is the special case of …\nReturns whether this is the special tag of <code>ConnectionId</code>.\nReturn whether this sum type is empty, that is, has no …\nReturns true if this is a <code>AlgebraicType::F32</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::F32</code>, otherwise …\nReturns true if this is a <code>AlgebraicType::F64</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::F64</code>, otherwise …\nReturns whether the type is a float type.\nReturns true if this is a <code>AlgebraicType::I128</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::I128</code>, otherwise …\nReturns true if this is a <code>AlgebraicType::I16</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::I16</code>, otherwise …\nReturns true if this is a <code>AlgebraicType::I256</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::I256</code>, otherwise …\nReturns true if this is a <code>AlgebraicType::I32</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::I32</code>, otherwise …\nReturns true if this is a <code>AlgebraicType::I64</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::I64</code>, otherwise …\nReturns true if this is a <code>AlgebraicType::I8</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::I8</code>, otherwise …\nReturns whether this type is the conventional identity …\nReturns whether this is the special case of …\nReturns whether this is the special tag of <code>Identity</code>.\nReturns whether this type is one of the integer types, …\nReturns true if this is a <code>AlgebraicValue::Max</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::Min</code>, otherwise …\nReturns whether this type is a never type.\nReturns whether this value represents a numeric zero.\nCheck whether this sum type is a structural option type.\nReturns true if this is a <code>AlgebraicType::Product</code>, …\nReturns true if this is a <code>AlgebraicValue::Product</code>, …\nReturns true if this is a <code>AlgebraicType::Ref</code>, otherwise …\nReturns whether this type is one which holds a scalar …\nReturns whether this type is scalar or a string type.\nReturns whether this type is the conventional <code>ScheduleAt</code> …\nReturn whether this sum type is the special <code>ScheduleAt</code> …\nReturns whether the type is a signed integer type.\nReturns whether this sum type is like on in C without data …\nCheck if the type is one of a small number of special, …\nReturns whether this is a special known type, currently …\nReturns whether this sum type is a special known type, …\nReturns whether this is a special known <code>tag</code>, currently …\nReturns true if this is a <code>AlgebraicType::String</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::String</code>, …\nReturns true if this is a <code>AlgebraicType::Sum</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::Sum</code>, otherwise …\nReturns whether this type is the conventional time-delta …\nReturns whether this is the special case of …\nReturns whether this is the special tag of …\nReturns whether this type is the conventional …\nReturns whether this is the special case of …\nReturns whether this is the special tag of …\nReturns true if this is a <code>AlgebraicType::U128</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::U128</code>, otherwise …\nReturns true if this is a <code>AlgebraicType::U16</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::U16</code>, otherwise …\nReturns true if this is a <code>AlgebraicType::U256</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::U256</code>, otherwise …\nReturns true if this is a <code>AlgebraicType::U32</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::U32</code>, otherwise …\nReturns true if this is a <code>AlgebraicType::U64</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::U64</code>, otherwise …\nReturns true if this is a <code>AlgebraicType::U8</code>, otherwise …\nReturns true if this is a <code>AlgebraicValue::U8</code>, otherwise …\nReturns whether this type is a unit type.\nReturns whether this is a unit type, that is, has no …\nReturns whether the type is an unsigned integer type.\nValidates that the type can be used to generate a type …\nValidates that the type can be used to generate a <em>use</em> of a …\nBreaking change; different major versions are not at all …\nReturns an <code>AlgebraicType</code> representing the type for <code>Self</code> in …\nGiven an AlgebraicType, returns the max value for that …\nThis is a static function that constructs the type of …\nGiven an AlgebraicType, returns the min value for that …\nNon-breaking change; a host can run a module that requests …\nReturns the name of the field.\nThe name of the field / element.\nThe canonical 0-variant “never” / “absurd” / “…\nReturns a product type with the given <code>elements</code> as its …\nReturns an element with the given <code>name</code> and <code>algebraic_type</code>.\nReturns a sum type with these possible <code>variants</code>.\nReturns a named element with <code>name</code> and <code>algebraic_type</code>.\nReturns a sum type of unnamed variants taken from <code>types</code>.\nOperator support for the query macro.\nReturns a structural option type where <code>some_type</code> is the …\nParses an RFC 3339 formatted timestamp string\nReturns a product type with the given <code>prod</code>.\nReturns an <code>AlgebraicValue</code> representing a product value …\nThis utility function is designed to project fields based …\nThis utility function is designed to project fields based …\nReturns a resolved <code>AlgebraicType</code> (containing no …\nIf <code>self</code> is <code>TermBound::Range</code>, returns the <code>rend_idx</code> value …\nReturns a sum type of unit variants with names taken from …\nReturns a sum type with the given <code>sum</code>.\nReturns an <code>AlgebraicValue</code> representing a sum value with <code>tag</code>…\nChecks if a host implementing this version can run a …\nExtract the value and replace it with a dummy one that is …\nConstruct a copy of the time-delta <code>TimeDuration</code> type.\nReturns the <code>TimeDuration</code> delta between <code>self</code> and <code>earlier</code>.\nConstruct a copy of the point-in-time <code>Timestamp</code> type.\nReturns <code>Err(abs(self) as Duration)</code> if <code>self</code> is negative.\nReturns a <code>Duration</code> representing the absolute magnitude of …\nReturns <code>Err(duration_before_unix_epoch)</code> if <code>self</code> is before …\nGet the number of microseconds <code>self</code> represents.\nGet the number of microseconds <code>self</code> is offset from …\nReturns an RFC 3339 and ISO 8601 date and time string such …\nConvert <code>self</code> into a <code>SystemTime</code> which refers to …\nInfer the <code>AlgebraicType</code> of an <code>AlgebraicValue</code>.\nThe canonical 0-element unit type.\nThe canonical unit value defined as the nullary product …\nReturns the unit product type.\nThe possible variants of the sum type.\nNot enough data was provided in the input.\nAn error that occurred when decoding.\nDeserializer from the BSATN data format.\nAn error during BSATN serialization.\nExpected the byte to be 0 or 1 to be a valid bool.\nLength did not match the statically expected length.\nThe tag does not exist for the sum.\nExpected data to be UTF-8 but it wasn’t.\nCustom error not in the other variants of <code>DecodeError</code>.\nDefines the BSATN serialization data format.\nTypes that can be encoded to BSATN.\nEnforces that a type is a primitive. This is purely …\nDecode <code>bytes</code> to the value type of <code>ty: S</code>.\nDefines the function <code>eq_bsatn</code> which equates …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize a <code>T</code> from the BSATN format in the buffered …\nDeserialize a <code>T</code> from the BSATN format in <code>bytes</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a deserializer using the given <code>reader</code>.\nReturns a serializer using the given <code>writer</code>.\nReturns the static size of the type of this object.\nBSATN-encode the row referred to by <code>self</code> into <code>buf</code>, pushing …\nBSATN-encode the row referred to by <code>self</code> into a …\nComputes the size of <code>val</code> when BSATN encoding without …\nSerialize <code>value</code> into a <code>Vec&lt;u8&gt;</code> in the BSATN format.\nSerialize <code>value</code> into the buffered writer <code>w</code> in the BSATN …\nDeserializer for array elements.\nDeserializer from the BSATN data format.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquates <code>lhs</code> to a BSATN-encoded <code>AlgebraicValue</code> of the same …\nAn error during BSATN serialization.\nDefines the BSATN serialization data format.\nA buffered reader of some kind.\nA buffered writer of some kind.\nNot enough data was provided in the input.\nA <code>BufWriter</code> that only counts the bytes.\nA cursor based [<code>BufReader&lt;&#39;de&gt;</code>] implementation.\nAn error that occurred when decoding.\nExpected the byte to be 0 or 1 to be a valid bool.\nLength did not match the statically expected length.\nThe tag does not exist for the sum.\nExpected data to be UTF-8 but it wasn’t.\nCustom error not in the other variants of <code>DecodeError</code>.\nA <code>BufWriter</code> that writes the bytes to two writers <code>W1</code> and <code>W2</code>.\nThe underlying input read from.\nConsumes the counter and returns the final count.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReads an array of type <code>[u8; N]</code> from the input.\nReads and returns a chunk of <code>.len() = N</code> as an array, …\nReads and returns a chunk of <code>.len() = size</code> advancing the …\nReads an <code>i128</code> in little endian (LE) encoding from the …\nReads an <code>i16</code> in little endian (LE) encoding from the input.\nReads an <code>i256</code> in little endian (LE) encoding from the …\nReads an <code>i32</code> in little endian (LE) encoding from the input.\nReads an <code>i64</code> in little endian (LE) encoding from the input.\nReads an <code>i8</code> in little endian (LE) encoding from the input.\nReads and returns a byte slice of <code>.len() = size</code> advancing …\nReads a <code>u128</code> in little endian (LE) encoding from the input.\nReads a <code>u16</code> in little endian (LE) encoding from the input.\nReads a <code>u256</code> in little endian (LE) encoding from the input.\nReads a <code>u32</code> in little endian (LE) encoding from the input.\nReads a <code>u64</code> in little endian (LE) encoding from the input.\nReads a <code>u8</code> in little endian (LE) encoding from the input.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new cursor on the provided <code>buf</code> input.\nThe position within the reader.\nWrites an <code>i128</code> to the buffer in little-endian (LE) …\nWrites an <code>i16</code> to the buffer in little-endian (LE) encoding.\nWrites an <code>i256</code> to the buffer in little-endian (LE) …\nWrites an <code>i32</code> to the buffer in little-endian (LE) encoding.\nWrites an <code>i64</code> to the buffer in little-endian (LE) encoding.\nWrites an <code>i8</code> to the buffer in little-endian (LE) encoding.\nWrites the <code>slice</code> to the buffer.\nWrites a <code>u128</code> to the buffer in little-endian (LE) encoding.\nWrites a <code>u16</code> to the buffer in little-endian (LE) encoding.\nWrites a <code>u256</code> to the buffer in little-endian (LE) encoding.\nWrites a <code>u32</code> to the buffer in little-endian (LE) encoding.\nWrites a <code>u64</code> to the buffer in little-endian (LE) encoding.\nWrites a <code>u8</code> to the buffer in little-endian (LE) encoding.\nReturns the number of bytes left to read in the input.\nA unique identifier for a client connection to a …\nExtract the first 8 bytes of this <code>ConnectionId</code> as if it …\nConvert a <code>ConnectionId</code> to a big-endian byte array.\nConvert a <code>ConnectionId</code> to a little-endian byte array.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an <code>ConnectionId</code> from a big-endian byte array.\nCreate an <code>ConnectionId</code> from a slice, assumed to be in …\nParse a hexadecimal string into a <code>ConnectionId</code>.\nCreate an <code>ConnectionId</code> from a little-endian byte array.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the first 16 characters of this <code>ConnectionId</code>’s …\nConvert this <code>ConnectionId</code> to a hexadecimal string.\nThis module defines the default ordering for fields of a …\nRaw definitions of the database schema.\nGenerate the next [Sequence]\nUnique + AutoInc\nIndex no unique\nPrimary key column (implies Unique)\nPrimaryKey + AutoInc\nPrimaryKey + Identity\nIndex unique\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nChecks if either ‘IDENTITY’ or ‘PRIMARY_KEY_AUTO’ …\nChecks if the ‘INDEXED’ constraint is set.\nChecks if the ‘PRIMARY_KEY’ constraint is set.\nChecks if the ‘UNIQUE’ constraint is set.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturns the ColumnAttribute of constraints as an enum …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nVisible only to the owner\nVisible to all\nDescribe the visibility of the table\nDescribe is the table is a <code>system table</code> or not.\nCreated by the system\nCreated by the User\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA label for a field of a <code>ProductType</code> or a variant of a …\nA named field. Names are required to be unique within the …\nAn unnamed field with a position. The unnamed fields in a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if a product type has the default ordering.\nChecks if a sum type has the default ordering.\nDatabase definitions v8, the last version before they were …\nABI Version 9 of the raw module definitions.\nA BTree index.\nA Hash index.\nWhich type of index to create.\nA struct representing the definition of a database column.\nA struct representing the definition of a database …\nA struct representing the definition of a database index.\nRepresents a sequence definition for a database table …\nA data structure representing the definition of a database …\nThe amount sequences allocate each time they over-run …\nThe number of values to preallocate for the sequence. …\nCreates a new RawIndexDefV8 with the provided parameters.\nThe name of the column.\nThe position of the column associated with this sequence.\nThe type of the column.\nList of column positions that compose the index.\nList of column positions associated with the constraint.\nThe columns of the table. The ordering of the columns is …\nThe name of the constraint.\nThe constraints applied to the columns.\nThe constraints on the table.\nCreates a new RawSequenceDefV8 instance for a specific …\nCreates an RawIndexDefV8 for a specific column of a table.\nCreates a <code>ConstraintDef</code> for a specific column of a table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>TableDef</code> from a product type and table name.\nConvert a product type to a list of column definitions.\nConcatenate the column names from the <code>columns</code>\nGet a column by its position in the table.\nCheck if the <code>col_name</code> exist on this RawTableDefV8\nThe increment value for the sequence.\nThe name of the index. This should not be assumed to …\nThe type of the index.\nThe indexes on the table.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the index is unique.\nThe maximum value for the sequence.\nThe minimum value for the sequence.\nCreates a new RawConstraintDefV8 with the specified …\nCreate a new <code>TableDef</code> instance with the specified …\nIf this is a schedule table, the reducer it is scheduled …\nThe name of the sequence.\nThe sequences attached to the table.\nThe starting value for the sequence.\nCreates a new RawColumnDefV8 for a system field with the …\nThe visibility of the table.\nThe name of the table.\nWhether the table was created by a user or by the system.\nSet the access rights for the table and return a new …\nGenerate a RawConstraintDefV8 using the supplied <code>columns</code>.\nGenerate a RawIndexDefV8 using the supplied <code>columns</code>.\nGenerate a RawSequenceDefV8 using the supplied <code>columns</code>.\nSet the constraints for the table and return a new <code>TableDef</code>…\nSet the indexes for the table and return a new <code>TableDef</code> …\nSet the reducer name for scheduled tables and return …\nSet the sequences for the table and return a new <code>TableDef</code> …\nSet the type of the table and return a new <code>TableDef</code> …\nImplemented using a B-Tree.\nImplemented using direct indexing in list(s) of <code>RowPointer</code>…\nCurrently forbidden.\nThe reducer will be invoked upon module initialization.\nSpecial roles a reducer can play in the module lifecycle.\nThe reducer will be invoked when a client connects.\nThe reducer will be invoked when a client disconnects.\nVisible only to the owner\nVisible to all\nRaw data attached to a constraint. New fields MUST be …\nA constraint definition attached to a table.\nA not-yet-validated identifier.\nData specifying an index algorithm. New fields MUST be …\nThe definition of a database index.\nA miscellaneous module export.\nA possibly-invalid raw module definition.\nA builder for a <code>RawModuleDefV9</code>.\nA reducer definition.\nData for the <code>RLS</code> policy on a table.\nMarks a table as a timer table for a scheduled reducer.\nA scoped type name, in the form …\nA sequence definition for a database table column.\nA not-yet-validated <code>sql</code>.\nBuilder for a <code>RawTableDef</code>.\nThe definition of a database table.\nA type declaration.\nRequires that the projection of the table onto these …\nCreated by the system.\nThe visibility of the table.\nWhether the table was created by the system or the user.\nCreated by the user.\nAccessor name for the index used in client codegen.\nAdd a type to the typespace, along with a type alias …\nAdd a reducer to the in-progress module. Accepts a …\nAdd a row-level security policy to the module.\nAdd a type to the in-progress module.\nThe algorithm parameters for the index.\nReturns a btree index algorithm for the columns <code>cols</code>.\nCreate a table builder.\nBuild a new table with a product type. Adds the type to …\nBuild a new table with a product type, for testing. Adds …\nThe position of the column associated with this sequence. …\nThe columns that must be unique.\nAny unique constraints on the table.\nWhether this type has a custom ordering.\nThe data for the constraint.\nReturns a direct index algorithm for the column <code>col</code>.\nGet the column ID of the column with the specified name, …\nBuild the table and add it to the module, returning the …\nFinish building, consuming the builder and returning the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe increment used when updating the SequenceDef.\nThe indices of the table.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the reducer has a special role in the module lifecycle, …\nThe maximum allowed value in this column. If not present, …\nThe minimum allowed value in this column. If not present, …\nMiscellaneous additional module exports.\nThe name of the table. Unique within a module, acts as the …\nIn the future, the user may FOR SOME REASON want to …\nIn the future, the user may FOR SOME REASON want to …\nIn the future, the user may FOR SOME REASON want to …\nIn the future, the user may FOR SOME REASON want to …\nThe name of the type declaration.\nThe name of the type. This must be unique within the …\nThe name of the reducer.\nCreate a new, empty <code>RawModuleDefBuilder</code>.\nThe types and optional names of the parameters, in order. …\nThe primary key of the table, if present. Must refer to a …\nA reference to a <code>ProductType</code> containing the columns of …\nThe name of the reducer to call.\nThe reducers exported by the module.\nLow level security definitions.\nConvert a string from a sats type-name annotation like …\nThe schedule for the table.\nThe column of the <code>scheduled_at</code> field of this scheduled …\nThe scope for this type.\nThe sequences for the table.\nThe <code>sql</code> expression to use for row-level security.\nThe value to start assigning to this column. Will be …\nWhether this table is public or private.\nWhether this is a system- or user-created table.\nThe tables of the database definition used in the module.\nThe type to which the declaration refers. This must point …\nThe types exported by the module.\nGet the typespace of the module.\nThe <code>Typespace</code> used by the module.\nSets the access rights for the table and return it.\nAdds a primary key to the table, with corresponding unique …\nAdds a RawSequenceDefV9 on the supplied <code>column</code>.\nGenerates a RawIndexDefV9 using the supplied <code>columns</code>.\nGenerates a RawIndexDefV9 using the supplied <code>columns</code> but …\nAdds a primary key to the table. You must also add a …\nAdds a schedule definition to the table.\nSets the type of the table and return it.\nGenerates a RawConstraintDefV9 using the supplied <code>columns</code>.\nThe column to index on. Only one is allowed, as direct …\nThe columns to index on. These are ordered.\nThe columns to index on. These are ordered.\nProvides an <code>ArrayVisitor</code> with access to each element of …\nA visitor walking through a <code>Deserializer</code> for arrays.\nAn implementation of [<code>ArrayVisitor&lt;&#39;de, T&gt;</code>] where the …\nAn implementation of [<code>ArrayVisitor&lt;&#39;de, T&gt;</code>] where the …\nA data structure that can be deserialized from any data …\nA data structure that can be deserialized in SATS without …\n<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …\nA data format that can deserialize any data structure …\nThe element / base type of the array.\nThe <code>Error</code> trait allows <code>Deserialize</code> implementations to …\nThe error type that can be returned if some error occurs …\nThe error type that can be returned if some error occurs …\nThe error type that can be returned if some error occurs …\nThe error type that can be returned if some error occurs …\nThe error type that can be returned if some error occurs …\nTurns a closure <code>impl Fn(&amp;mut Formatter) -&gt; Result</code> into a …\nVisitor used to deserialize the name of a field.\nA vector with two operations: <code>with_capacity</code> and <code>push</code>.\nProvides a <code>ProductVisitor</code> with access to each element of …\nDeserializes <code>none</code> variant of an optional value.\nThe resulting product.\nThe resulting field name.\nThe resulting sum.\nThe result of identifying a variant, e.g., some index type.\nThe output produced by this visitor.\nThe output produced by this visitor.\nThe type produced by using this seed.\nWhat kind of product is this?\nA visitor walking through a <code>Deserializer</code> for products.\nA product in the context of reducer arguments.\nProvides a <code>ProductVisitor</code> with access to each element of …\nA <code>SliceVisitor</code> is provided a slice <code>T</code> of some elements by a …\nProvides a <code>SumVisitor</code> access to the data of a sum in the …\nA visitor walking through a <code>Deserializer</code> for sums.\nThe visitor used to deserialize the content of the sum …\nA visitor passed from <code>SumAccess</code> to <code>SumVisitor::visit_sum</code> …\nA visitor passed from <code>SumVisitor</code> to <code>SumAccess::variant</code> …\nThe visitor deserializes a <code>Bound&lt;T&gt;</code>.\nA basic implementation of <code>ArrayVisitor::visit</code> using the …\nRaised when there is general error when deserializing a …\nEquivalent to the more common <code>Deserialize::deserialize</code> …\nDeserialize this value from the given <code>deserializer</code>.\nCalled when deserializing the contents of a sum variant.\nDeserializes an array value.\nDeserializes an array value.\nDeserializes a <code>bool</code> value from the input.\nDeserializes a byte slice-like value.\nDeserializes an <code>f32</code> value from the input.\nDeserializes an <code>f64</code> value from the input.\nDeserializes an <code>i128</code> value from the input.\nDeserializes an <code>i16</code> value from the input.\nDeserializes an <code>i256</code> value from the input.\nDeserializes an <code>i32</code> value from the input.\nDeserializes an <code>i64</code> value from the input.\nDeserializes an <code>i8</code> value from the input.\nDeserializes a product value from the input.\nCalled when deserializing the contents of a sum variant, …\nDeserializes a string-like object the input.\nDeserializes an <code>&amp;str</code> string value.\nDeserializes a sum value from the input.\nDeserializes a <code>u128</code> value from the input.\nDeserializes a <code>u16</code> value from the input.\nDeserializes a <code>u256</code> value from the input.\nDeserializes a <code>u32</code> value from the input.\nDeserializes a <code>u64</code> value from the input.\nDeserializes a <code>u8</code> value from the input.\nA field with <code>index</code> was specified more than once.\nProvides a list of valid field names.\nTurns a closure <code>F: Fn(&amp;mut Formatter) -&gt; Result</code> into a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserializes field name of type <code>V::Output</code> from the input …\nDeserializes field value of type <code>T</code> from the input.\nStatefully deserializes the field value <code>T::Output</code> from the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe product length was not as promised.\nReturns whether an option is expected.\nThe sort of product deserialized.\nThere was a missing field at <code>index</code>.\nReturns a new <code>NoneAccess</code>.\nThis returns <code>Ok(Some(value))</code> for the next element in the …\nDeserializes an <code>T</code> from the input.\nStatefully deserializes <code>T::Output</code> from the input provided …\nReturns the kind of the product.\nReturns the length of the product.\nReturns the name of the product, if any.\nPush to the vector the <code>elem</code>.\nReturns the number of elements remaining in the array, if …\nReturns the name of the sum, if any.\nA field with name <code>field_name</code> does not exist.\nThe <code>name</code> is not that of a variant of the sum type.\nThe <code>tag</code> does not specify a variant of the sum type.\nCalled to identify which variant to deserialize. Returns a …\nProvides a list of variant names.\nDeserializes the name of a field using <code>name</code>.\nThe input contains a slice.\nThe input contains an array.\nThe input contains a slice that lives at least as long (<code>&#39;de</code>…\nIdentify the variant based on <code>name</code>.\nDeserialize, provided the fields’ types, a product value …\nThe input contains a named product.\nThe input contains a slice and ownership of the slice is …\nDeserializes the name of a field using <code>index</code>.\nDeserialize, provided the fields’ types, a product value …\nThe input contains an unnamed product.\nDrives the deserialization of a sum value.\nIdentify the variant based on <code>tag</code>.\nCreate the collection with the given capacity.\nContains the error value\nContains the success value\nA wrapper for using Result in tests, so it display nicely\nA wrapper for using on test so the error display nicely\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn <code>Identity</code> for something interacting with the database.\nThe 0x1 <code>Identity</code>\nThe 0x0 <code>Identity</code>\nExtract the first 8 bytes of this <code>Identity</code> as if it was …\nFor when the owner == caller\nWARNING: Use this only for simple test were the <code>auth</code> don’…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an <code>Identity</code> from a BIG-ENDIAN byte array.\nCreate an <code>Identity</code> from a LITTLE-ENDIAN byte array.\nConverts <code>__identity__: u256</code> to <code>Identity</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDoes <code>owner == caller</code>\nExtract the first 16 characters of this <code>Identity</code>’s …\nConvert this <code>Identity</code> to a BIG-ENDIAN byte array.\nReturns this <code>Identity</code> as a byte array.\nConvert this <code>Identity</code> to a hexadecimal string.\nConverts this identity to an <code>u256</code>.\nMetrics collected during the course of a transaction.\nHow many bytes are read?\nHow many bytes did we send to clients?\nHow many bytes are written?\nHow many subscription updates did we execute?\nHow many subscriptions had some updates?\nHow many times do we evaluate the same row in a …\nHow many duplicate rows do we send in a subscription …\nReturns the argument unchanged.\nHow many times is an index probed?\nCalls <code>U::from(self)</code>.\nHow many rows were deleted?\nHow many rows were inserted?\nHow many rows are iterated over?\nHow many rows were updated?\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReverse the order of the <code>cmp</code>, to helps in reducing the …\nA type used by the query planner for incremental evaluation\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA regular interval at which the repeated reducer is …\nWhen a scheduled reducer should execute, either at a …\nA specific time to which the reducer is scheduled.\nReturns the argument unchanged.\nGet the special <code>AlgebraicType</code> for <code>ScheduleAt</code>.\nCalls <code>U::from(self)</code>.\nConverts the <code>ScheduleAt</code> to a <code>std::time::Duration</code> from now.\nConverts the <code>ScheduleAt</code> to a <code>Timestamp</code>.\nThe base trait serialization error types must implement.\nThe error type when some error occurs during serialization.\nMust match the <code>Error</code> type of any <code>Serializer</code> that uses this …\nMust match the <code>Error</code> type of any <code>Serializer</code> that uses this …\nMust match the <code>Error</code> type of any <code>Serializer</code> that uses this …\nForwards the implementation of a named product value to …\nA type usable in one of the associated types of <code>Serializer</code> …\nThe output type produced by this <code>Serializer</code> during …\nMust match the <code>Ok</code> type of any <code>Serializer</code> that uses this …\nMust match the <code>Ok</code> type of any <code>Serializer</code> that uses this …\nMust match the <code>Ok</code> type of any <code>Serializer</code> that uses this …\nA <strong>data structure</strong> that can be serialized into any data …\nReturned from <code>Serializer::serialize_array</code>.\nType returned from <code>serialize_array</code> for serializing the …\nReturned from <code>Serializer::serialize_named_product</code>.\nType returned from <code>serialize_named_product</code> for serializing …\nReturned from <code>Serializer::serialize_seq_product</code>.\nType returned from <code>serialize_seq_product</code> for serializing …\nA data format that can deserialize any data structure …\nReturns an error derived from <code>msg: impl Display</code>.\nConsumes and finalizes the array serializer returning the …\nConsumes and finalizes the product serializer returning …\nConsumes and finalizes the product serializer returning …\nForwards the serialization of a named product of <code>len</code> fields\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a forwarder based on the provided unnamed product …\nSerialize <code>self</code> in the data format of <code>S</code> using the provided …\nBegin to serialize a variably sized array. This call must …\nSerialize a <code>bool</code> value.\nSerialize the given <code>bsatn</code> encoded data of type <code>ty</code>.\nSerialize the given <code>bsatn</code> encoded data of type <code>ty</code>.\nSerialize a <code>&amp;[u8]</code> byte slice.\nSerialize an array <code>element</code>.\nSerialize an unnamed product <code>element</code>.\nSerialize a named product <code>element</code> with <code>name</code>.\nSerialize an <code>f32</code> value.\nSerialize an <code>f64</code> value.\nSerialize an <code>i128</code> value.\nSerialize an <code>i16</code> value.\nSerialize an <code>i256</code> value.\nSerialize an <code>i32</code> value.\nSerialize an <code>i64</code> value.\nSerialize an <code>i8</code> value.\nBegin to serialize a product with named fields. This call …\nBegin to serialize a product with unnamed fields. This …\nSerialize a <code>&amp;str</code> string slice.\nSerialize the given <code>string</code>.\nSerialize a <code>u128</code> value.\nSerialize a <code>u16</code> value.\nSerialize a <code>u256</code> value.\nSerialize a <code>u32</code> value.\nSerialize a <code>u64</code> value.\nSerialize a <code>u8</code> value.\nSerialize a sum value provided the chosen <code>tag</code>, <code>name</code>, and …\nThe value of a system variable in <code>st_var</code>. Defined here …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe SpacetimeDB Algebraic Type System (SATS) is a …\nThe type of array values where elements are of a base type …\nThe bool type. Values <code>AlgebraicValue::Bool(b)</code> will have …\nThe <code>F32</code> type. Values <code>AlgebraicValue::F32(v)</code> will have this …\nThe <code>F64</code> type. Values <code>AlgebraicValue::F64(v)</code> will have this …\nThe <code>I128</code> type. Values <code>AlgebraicValue::I128(v)</code> will have …\nThe <code>I16</code> type. Values <code>AlgebraicValue::I16(v)</code> will have this …\nThe <code>I256</code> type. Values <code>AlgebraicValue::I256(v)</code> will have …\nThe <code>I32</code> type. Values <code>AlgebraicValue::I32(v)</code> will have this …\nThe <code>I64</code> type. Values <code>AlgebraicValue::I64(v)</code> will have this …\nThe <code>I8</code> type. Values <code>AlgebraicValue::I8(v)</code> will have this …\nA structural product type.\nA structural product type  of the factors given by <code>elements</code>…\nA factor / element of a product type.\nA type where the definition is given by the typing context …\nThe UTF-8 encoded <code>String</code> type. Values …\nA structural sum type.\nA structural sum type.\nThe <code>U128</code> type. Values <code>AlgebraicValue::U128(v)</code> will have …\nThe <code>U16</code> type. Values <code>AlgebraicValue::U16(v)</code> will have this …\nThe <code>U256</code> type. Values <code>AlgebraicValue::U256(v)</code> will have …\nThe <code>U32</code> type. Values <code>AlgebraicValue::U32(v)</code> will have this …\nThe <code>U64</code> type. Values <code>AlgebraicValue::U64(v)</code> will have this …\nThe <code>U8</code> type. Values <code>AlgebraicValue::U8(v)</code> will have this …\nThe type of the element.\nThe factors of the product type.\nThe name of the field / element.\nThe possible variants of the sum type.\nA value in SATS typed at some <code>AlgebraicType</code>.\nA homogeneous array of <code>AlgebraicValue</code>s. The array has the …\nA <code>bool</code> value of type <code>AlgebraicType::Bool</code>.\nA totally ordered <code>F32</code> value of type <code>AlgebraicType::F32</code>.\nA totally ordered <code>F64</code> value of type <code>AlgebraicType::F64</code>.\nAn <code>i128</code> value of type <code>AlgebraicType::I128</code>.\nAn <code>i16</code> value of type <code>AlgebraicType::I16</code>.\nAn <code>i256</code> value of type <code>AlgebraicType::I256</code>.\nAn <code>i32</code> value of type <code>AlgebraicType::I32</code>.\nAn <code>i64</code> value of type <code>AlgebraicType::I64</code>.\nAn <code>i8</code> value of type <code>AlgebraicType::I8</code>.\nThe maximum value in the total ordering. Cannot be …\nThe minimum value in the total ordering. Cannot be …\nA structural product value.\nA product value is made of a list of “elements” / “…\nA UTF-8 string value of type <code>AlgebraicType::String</code>.\nA structural sum value.\nA <code>u128</code> value of type <code>AlgebraicType::U128</code>.\nA <code>u16</code> value of type <code>AlgebraicType::U16</code>.\nA <code>u256</code> value of type <code>AlgebraicType::U256</code>.\nA <code>u32</code> value of type <code>AlgebraicType::U32</code>.\nA <code>u64</code> value of type <code>AlgebraicType::U64</code>.\nA <code>u8</code> value of type <code>AlgebraicType::U8</code>.\nThe values that make up this product value.")