searchState.loadedDescShard("spacetimedb_primitives", 0, "Auto Increment\nGenerate the next [Sequence]\nThe assigned constraint OR auto-inc marker for a <code>Column</code>\nA single column.\nThe position of a column within a table.\nA list of columns.\nThis represents a list of <code>ColId</code>s but packed into a <code>u64</code> in …\nA borrowed list of columns or a single one.\nA compressed set of columns. Like a <code>ColList</code>, but …\nAn identifier for a constraint, unique within a database.\nThe assigned constraint for a <code>Table</code>\nRepresents constraints for a database table. May apply to …\nUnique + AutoInc\nUnique + AutoInc\nUnique + AutoInc\nIndex no unique\nIndex no unique\nIndex no unique\nAn identifier for an index, unique within a database.\nPrimary key column (implies Unique)\nPrimary key column (implies Unique).\nPrimary key column (implies Unique)\nPrimaryKey + AutoInc\nPrimaryKey + AutoInc\nPrimaryKey + AutoInc\nPrimaryKey + Identity\nPrimaryKey + Identity\nPrimaryKey + Identity\nThe minimum size of a chunk yielded by a wasm abi RowIter.\nThe index of a reducer as defined in a module’s reducers …\nThe sentinel value for this type. This will be initialized …\nThe sentinel value for this type. This will be initialized …\nThe sentinel value for this type. This will be initialized …\nThe sentinel value for this type. This will be initialized …\nThe sentinel value for this type. This will be initialized …\nAn identifier for a schedule, unique within a database.\nAn identifier for a sequence, unique within a database.\nAn identifier for a table, unique within a database.\nIndex unique\nIndex unique\nIndex unique\nGet a flags value with all known bits set.\nReturns <code>head</code> if that is the only element.\nReturns <code>Some(col)</code> iff <code>self</code> is singleton.\nCreates a new <code>Constraints</code> instance with …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nReturns the bits representing the constraints.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nConstructs a <code>ColList</code> like so <code>col_list![0, 2]</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns whether <code>needle</code> is contained in the list.\nWhether all set bits in a source flags value are also set …\nCheck if a <code>ColSet</code> contains a given column.\nThe intersection of a source flags value with the …\nReturns an empty list.\nGet a flags value with all bits unset.\nError numbers for the wasm abi.\nTakes a macro that expects …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nCreates a new <code>Constraints</code> instance that is <code>Self::unique</code> if …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nChecks if either ‘IDENTITY’ or ‘PRIMARY_KEY_AUTO’ …\nChecks if either ‘IDENTITY’ or ‘PRIMARY_KEY_AUTO’ …\nChecks if the ‘INDEXED’ constraint is set.\nChecks if the ‘INDEXED’ constraint is set.\nChecks if the ‘PRIMARY_KEY’ constraint is set.\nChecks if the ‘PRIMARY_KEY’ constraint is set.\nChecks if the ‘UNIQUE’ constraint is set.\nChecks if the ‘UNIQUE’ constraint is set.\nReturns the head of the list, if any.\nCreates a new <code>Constraints</code> instance with …\nConvert <code>self</code> to a <code>usize</code> suitable for indexing into an …\nConvert <code>self</code> to a <code>usize</code> suitable for indexing into an …\nConvert <code>self</code> to a <code>usize</code> suitable for indexing into an …\nConvert <code>self</code> to a <code>usize</code> suitable for indexing into an …\nConvert <code>self</code> to a <code>usize</code> suitable for indexing into an …\nConvert <code>self</code> to a <code>usize</code> suitable for indexing into an …\nConvert <code>self</code> to a <code>usize</code> suitable for indexing into an …\nCreates a new <code>Constraints</code> instance with …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nReturns whether the list is empty.\nReturns whether the list is empty.\nWhether all bits in this flags value are unset.\nCheck if this ID is the sentinel value.\nCheck if this ID is the sentinel value.\nCheck if this ID is the sentinel value.\nCheck if this ID is the sentinel value.\nCheck if this ID is the sentinel value.\nReturns an iterator over all the columns in this list.\nReturns an iterator over all the columns in this list.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturns the ColumnAttribute of constraints as an enum …\nReturns the ConstraintKind of constraints as an enum …\nReturns the last of the list, if any.\nReturns the length of the list.\nReturns the length of this list.\nReturns a list with a single column. As long <code>col</code> is below …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nCreates a new <code>Constraints</code> instance with …\nCreates a new <code>Constraints</code> instance with …\nCreates a new <code>Constraints</code> instance with …\nPush <code>col</code> onto the list.\nAdds a constraint to the existing constraints.\nAdd auto-increment constraint to the existing constraints. …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nConverts to a <code>ColList</code>.\nConvert to a <code>Box&lt;[u16]&gt;</code>.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nCreates a new <code>Constraints</code> instance with …\nCreates a new <code>Constraints</code> instance with no constraints set.\nReturns an empty list with a capacity to hold <code>cap</code> elements.\nCouldn’t decode the BSATN to the expected type\nThe provided buffer is not large enough to store the data\nABI called by host returned an error\nThe index was not unique\nABI call can only be made while in a transaction\nThe provided sink has no more space left\nThe provided bytes source or sink is not valid\nThe provided console timer does not exist\nNo such index\nThe provided row iterator is not valid\nThe row was not found, e.g., in an update call\nNo such table\nSpecified delay in scheduling row was too long\nValue with given unique identifier already exists\nGet the error message for an error number, if it exists.")