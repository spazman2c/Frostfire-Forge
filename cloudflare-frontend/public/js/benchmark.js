let clients=document.getElementById("clients"),clientsLabel=document.getElementById("clients-label"),iterations=document.getElementById("iterations"),iterationsLabel=document.getElementById("iterations-label"),data=document.getElementById("data"),dataLabel=document.getElementById("data-label"),start=document.getElementById("start"),result=document.getElementById("result"),interval=document.getElementById("interval"),intervalLabel=document.getElementById("interval-label"),stop=document.getElementById("stop"),stopped=!1;function createPacket(e){var t=new Uint8Array(1024*e*1024);for(let e=0;e<t.length;e++)t[e]=Math.floor(256*Math.random());return t}let packet={decode(e){return(new TextDecoder).decode(e)},encode(e){return(new TextEncoder).encode(e)}};if(!(iterations&&data&&iterationsLabel&&dataLabel&&start&&result&&clients))throw new Error("Element not found");function formatDataSize(e){return e<1024?e.toFixed(2)+" B":e<1048576?(e/1024).toFixed(2)+" KB":e<1073741824?(e/1048576).toFixed(2)+" MB":(e/1073741824).toFixed(2)+" GB"}function calculateDataArrayBytes(e,t){return 1024*e*1024/t*t}clients.value="50",clientsLabel.innerText="Clients: "+clients.value,iterations.value="100",iterationsLabel.innerText="Iterations: "+iterations.value,data.value="0.000031",interval.value="64",intervalLabel.innerText=`Interval: ${interval.value} ms`;let bytesPerElement=4,dataValueInBytes=calculateDataArrayBytes(Number(data.value),bytesPerElement),connections=(dataLabel.innerText="Data per message: "+formatDataSize(dataValueInBytes),iterations.addEventListener("input",()=>{iterationsLabel.innerText="Iterations: "+iterations.value}),data.addEventListener("input",()=>{var e=calculateDataArrayBytes(Number(data.value),bytesPerElement);dataLabel.innerText="Data per message: "+formatDataSize(e)}),clients.addEventListener("input",()=>{clientsLabel.innerText="Clients: "+clients.value}),interval.addEventListener("input",()=>{intervalLabel.innerText=`Interval: ${interval.value} ms`}),new Map);function reset(){stop.disabled=!0,start.disabled=!1,clients.disabled=!1,iterations.disabled=!1,data.disabled=!1,interval.disabled=!1,stopped=!1}start.addEventListener("click",async()=>{if(!start.disabled){start.disabled=!0,stop.disabled=!1,clients.disabled=!0,iterations.disabled=!0,data.disabled=!0,interval.disabled=!0,result.style.display="block",result.innerHTML="",stopped=!1;let s=0,l=parseInt(clients.value),i=parseInt(iterations.value);let n=createPacket(parseFloat(data.value));var e=await(async r=>{let s=[];return new Promise((t,a)=>{let n=0;for(let e=0;e<r;e++){let e=new WebSocket("ws://localhost:3001");e.binaryType="arraybuffer",e.onopen=()=>{s.push(e),n++,stopped?result.innerHTML="Stopping benchmark...":result.innerText=`Connected ${n} / ${r} clients`,n===r&&(stopped||(result.innerText=`Connected ${r} clients`),t(s))},e.onerror=e=>{a(e)}}})})(l);let o=Date.now();e.forEach(a=>{let r=Math.random().toString(36).substring(7);if(connections.set(r,[a]),stopped)connections.delete(r),a.close(),0===connections.size&&(result.innerHTML="Benchmark aborted",setTimeout(()=>{result.style.display="none",result.innerHTML="",reset()},3e3));else{let t=0;(async()=>{for(let t=0;t<i;t++){if(stopped)return;await new Promise(e=>{a.send(packet.encode(JSON.stringify({type:"BENCHMARK",data:{data:n,id:t}}))),setTimeout(e,Number(interval.value))})}})(),a.onerror=e=>{stopped||(console.error("WebSocket error:",e),result.innerText="An error occurred while connecting to the WebSocket.",connections.delete(r))},a.onclose=()=>{var e,t,a,n;connections.delete(r),0===connections.size&&(t=(e=(Date.now()-o)/1e3)/s,a=formatDataSize(calculateDataArrayBytes(Number(data.value),bytesPerElement)),n=formatDataSize(calculateDataArrayBytes(Number(data.value),bytesPerElement)*i),stopped?(result.textContent="Benchmark aborted",setTimeout(()=>{result.style.display="none",result.innerHTML="",reset()},3e3)):(result.innerHTML=`
                        <p>Processed ${s} / ${i*l} messages</p>
                        <p>Clients: ${l}</p>
                        <p>Interval: ${interval.value} ms</p>
                        <p>Iterations: ${i}</p>
                        <p>Total data sent: ${n}</p>
                    <p>Data per message: ${a}</p>
                    <p>Total time elapsed: ${e} s</p>
                    <p>Average time per message: ${Math.round(1e3*t)} ms</p>
                `,reset()))},a.onmessage=e=>{e.data instanceof ArrayBuffer&&"BENCHMARK"===JSON.parse(packet.decode(e.data)).type&&(s++,t++,result.innerText=`Received ${s} messages`,t>=i)&&a.close()}}})}}),stop.addEventListener("click",()=>{stop.disabled=!0,stopped=!0,connections.forEach(e=>{e.forEach(e=>{e.readyState===WebSocket.OPEN&&e.close()})})});